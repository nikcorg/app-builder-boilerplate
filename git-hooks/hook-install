#!/usr/bin/env bash

while [ 1 -lt ${#@} ]; do
    $0 "$1" || exit $?
    shift
done

if [ 0 -eq ${#@} ]; then
    echo "Usage: $(basename $0) <hook 1> [<hook 2> [<hook 3> ...]]"
    exit 0
fi

INSTALL_TARGET="$1"

ERR_MISSING_INSTALL_TARGET=1
ERR_GIT_DIR_NOT_FOUND=2
ERR_SOURCE_MISSING=3
ERR_RUNNER_MISSING=4
ERR_CONFLICT=5

err_exit()
{
    local MSG="$2"
    local EXIT_CODE="$1"

    if [ "x$MSG" != "x" ]; then
        if [ "0" != "${EXIT_CODE}" ]; then
            MSG="Error: ${MSG}"
        fi

        echo "$(basename $0): $MSG" >&2
    fi

    exit $EXIT_CODE
}

do_install() {
    ln -s $1 $2
}

if [ "x" = "x$INSTALL_TARGET" ]; then
    err_exit $ERR_MISSING_INSTALL_TARGET "Install target missing"
fi

BASEDIR=$(pwd)
GITDIR="${BASEDIR}/.git"
HOOKDIR="${GITDIR}/hooks"
HOOKSRC="${BASEDIR}/git-hooks/${INSTALL_TARGET}"
HOOKDEST="${HOOKDIR}/${INSTALL_TARGET}"
HOOKRUNNER="${BASEDIR}/git-hooks/hook-runner"

if [ ! -d "${GITDIR}" ]; then
    err_exit $ERR_GIT_DIR_NOT_FOUND ".git directory not found: ${GITDIR}"
fi

if [ ! -f "${HOOKSRC}" ]; then
    err_exit $ERR_SOURCE_MISSING "hook script not found: ${HOOKSRC}"
fi

if [ ! -f "$HOOKRUNNER" ]; then
    err_exit $ERR_RUNNER_MISSING "hook runner missing: ${HOOKRUNNER}"
fi

if [ -d "${HOOKDIR}" ]; then
    mkdir -p $HOOKDIR
fi

if [ -f "${HOOKDEST}" -o -L "${HOOKDEST}" ]; then
    # Is it already linking to the hook runner?
    if [ -L "${HOOKDEST}" -a "$(readlink $HOOKDEST)" == "${HOOKRUNNER}" ]; then
        # Already installed, exit
        exit 0
    fi

    # Resolve conflict, rename the existing script
    SUFFIX="0"
    UNIQUENAME="${HOOKDIR}/${INSTALL_TARGET}.${SUFFIX}"

    while [ -f "$UNIQUENAME" -o -L "$UNIQUENAME" ]; do
        SUFFIX=$(($SUFFIX + 1))
        UNIQUENAME="${HOOKDIR}/${INSTALL_TARGET}.${SUFFIX}"
    done

    mv "$HOOKDEST" "$UNIQUENAME"

    echo "Conflict: Renamed existing ${INSTALL_TARGET} -> $(basename $UNIQUENAME)" >&2
fi

do_install "$HOOKRUNNER" "$HOOKDEST"

if [ 0 -ne $? ]; then
    echo "Hooking failed for ${INSTALL_TARGET}"
    exit $?
fi

echo "Hooked onto ${INSTALL_TARGET}"

exit 0
